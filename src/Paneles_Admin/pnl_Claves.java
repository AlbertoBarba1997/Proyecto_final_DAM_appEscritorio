/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles_Admin;

import Interfaces.Menu_admin_interfaz;
import Util.Utilidades;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.BorderFactory.createEmptyBorder;
import javax.swing.JLabel;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juana
 */
public class pnl_Claves extends javax.swing.JPanel {

    Menu_admin_interfaz interfaz_menu_padre;
    BufferedReader inSocket;
    PrintWriter outSocket;

    DefaultTableModel defaultTableMode;
    
    int filtradoRolAnterior;

    public pnl_Claves(Menu_admin_interfaz interfaz_menu_padre, BufferedReader inSocket, PrintWriter outSocket) {
        initComponents();
        filtradoRolAnterior=0;
        this.interfaz_menu_padre = interfaz_menu_padre;

        this.inSocket = inSocket;
        this.outSocket = outSocket;
        System.out.println(outSocket);

        darFormatoTabla();
        

        cargarTablaClaves();  //Tendria que hacerlo en un hilo o asink task
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo_lb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        eliminar_lb = new javax.swing.JLabel();
        error_lbl = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        patronBuscar_tf = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        nuevo_lb1 = new javax.swing.JLabel();
        nombre_tf = new javax.swing.JTextField();
        nuevo_lb2 = new javax.swing.JLabel();
        clave_tf = new javax.swing.JTextField();
        añadirRol_lb = new javax.swing.JLabel();
        nuevo_lb = new javax.swing.JLabel();
        añadirClave_lb = new javax.swing.JLabel();
        modificar_lb = new javax.swing.JLabel();
        nuevo_lb3 = new javax.swing.JLabel();
        nuevaClave_tf = new javax.swing.JTextField();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1390, 850));

        titulo_lb.setFont(new java.awt.Font("Ebrima", 1, 36)); // NOI18N
        titulo_lb.setForeground(new java.awt.Color(255, 255, 255));
        titulo_lb.setText("ROLES Y CLAVES DE ACCESO");

        jScrollPane1.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jTable1.setBackground(new java.awt.Color(222, 222, 222));
        jTable1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rol", "Nombre", "Clave de Acceso"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setOpaque(false);
        jTable1.setRowHeight(38);
        jTable1.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(60);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(1);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable1.getColumnModel().getColumn(1).setMinWidth(200);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(350);
            jTable1.getColumnModel().getColumn(2).setMinWidth(150);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(250);
        }

        eliminar_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        eliminar_lb.setForeground(new java.awt.Color(255, 255, 255));
        eliminar_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_remove_30px.png"))); // NOI18N
        eliminar_lb.setText("Eliminar");
        eliminar_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseExited(evt);
            }
        });

        error_lbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        error_lbl.setForeground(new java.awt.Color(255, 255, 255));
        error_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel1.setBackground(new java.awt.Color(74, 31, 61));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_search_30px_1.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        patronBuscar_tf.setBackground(new java.awt.Color(74, 31, 61));
        patronBuscar_tf.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        patronBuscar_tf.setForeground(new java.awt.Color(255, 255, 255));
        patronBuscar_tf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        patronBuscar_tf.setToolTipText("");
        patronBuscar_tf.setBorder(null);
        patronBuscar_tf.setCaretColor(new java.awt.Color(255, 255, 255));
        patronBuscar_tf.setOpaque(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(patronBuscar_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(patronBuscar_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setOpaque(false);

        nuevo_lb1.setFont(new java.awt.Font("Dialog", 2, 16)); // NOI18N
        nuevo_lb1.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb1.setText("Nombre:");

        nombre_tf.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        nombre_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombre_tfActionPerformed(evt);
            }
        });

        nuevo_lb2.setFont(new java.awt.Font("Dialog", 2, 16)); // NOI18N
        nuevo_lb2.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb2.setText("Clave:");

        clave_tf.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        clave_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clave_tfActionPerformed(evt);
            }
        });

        añadirRol_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        añadirRol_lb.setForeground(new java.awt.Color(255, 255, 255));
        añadirRol_lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        añadirRol_lb.setText("Añadir");
        añadirRol_lb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        añadirRol_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                añadirRol_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                añadirRol_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                añadirRol_lbMouseExited(evt);
            }
        });

        nuevo_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        nuevo_lb.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_plus_30px.png"))); // NOI18N
        nuevo_lb.setText("Nuevo Rol");

        añadirClave_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        añadirClave_lb.setForeground(new java.awt.Color(255, 255, 255));
        añadirClave_lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        añadirClave_lb.setText("Añadir");
        añadirClave_lb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        añadirClave_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                añadirClave_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                añadirClave_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                añadirClave_lbMouseExited(evt);
            }
        });

        modificar_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        modificar_lb.setForeground(new java.awt.Color(255, 255, 255));
        modificar_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_edit_30px.png"))); // NOI18N
        modificar_lb.setText("Modificar clave");
        modificar_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modificar_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modificar_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                modificar_lbMouseExited(evt);
            }
        });

        nuevo_lb3.setFont(new java.awt.Font("Dialog", 2, 16)); // NOI18N
        nuevo_lb3.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb3.setText("Nueva clave:");

        nuevaClave_tf.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        nuevaClave_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaClave_tfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(nuevo_lb1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nombre_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(nuevo_lb2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clave_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(añadirRol_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(nuevo_lb3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nuevaClave_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(añadirClave_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modificar_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nuevo_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(nuevo_lb)
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo_lb1)
                    .addComponent(nombre_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevo_lb2)
                    .addComponent(clave_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(añadirRol_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addComponent(modificar_lb)
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevaClave_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(añadirClave_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevo_lb3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo_lb)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(165, 165, 165)
                                .addComponent(eliminar_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(96, 96, 96)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(491, 491, 491))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(556, 556, 556))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(titulo_lb)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eliminar_lb)))
                .addGap(4, 4, 4)
                .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(258, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void eliminar_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseExited
        Utilidades.opcionFocusLost(evt);
    }//GEN-LAST:event_eliminar_lbMouseExited

    private void eliminar_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseEntered
         Utilidades.opcionFocusGained(evt);
    }//GEN-LAST:event_eliminar_lbMouseEntered

    private void eliminar_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseClicked
        //1 Mirar si hay seleccionado un trabajador en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();
        
        if (filaSeleccionada != -1) {

            //2 Obtener el dni (2 columna) del trabajador seleccionado
            int idSeleccionado = (int) jTable1.getValueAt(filaSeleccionada, 0);

            if (idSeleccionado < 4) {
                error_lbl.setText("Rol primario, no es posible eliminar");
            } else {
                //3 (en hilo) Mandar un mensaje al servidor "C7-ELIMINAR_TRABAJADOR:dni"
                eliminarRol(idSeleccionado);
            }
            
        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        
            
       
    }//GEN-LAST:event_eliminar_lbMouseClicked

    private void modificar_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modificar_lbMouseExited
        
    }//GEN-LAST:event_modificar_lbMouseExited

    private void modificar_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modificar_lbMouseEntered
        
    }//GEN-LAST:event_modificar_lbMouseEntered

    private void modificar_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modificar_lbMouseClicked
        
        
    }//GEN-LAST:event_modificar_lbMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        String patron=patronBuscar_tf.getText();
        cargarTablaTrabajadoresBusqueda(patron);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void nombre_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombre_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombre_tfActionPerformed

    private void clave_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clave_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clave_tfActionPerformed

    private void añadirRol_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_añadirRol_lbMouseClicked
        
        //1 obtener parametros
        String nombre=nombre_tf.getText();
        String clave=clave_tf.getText();
        
        //2 comprobar que no estan vacios
        if(nombre.equals("")||clave.equals("")){
            error_lbl.setText("Los campos \"nombre\" y \"clave\" deben estar llenos. Puede seleccionar '0' como clave si no desea ninguna");
        }else{
            //3 lanzar metodo 
            registrarRol(nombre, clave);
            
        }
    }//GEN-LAST:event_añadirRol_lbMouseClicked

    private void añadirRol_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_añadirRol_lbMouseEntered
        Utilidades.opcionFocusGained(evt);
    }//GEN-LAST:event_añadirRol_lbMouseEntered

    private void añadirRol_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_añadirRol_lbMouseExited
        Utilidades.opcionFocusLost(evt);
    }//GEN-LAST:event_añadirRol_lbMouseExited

    private void añadirClave_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_añadirClave_lbMouseClicked
         //1 Mirar si hay seleccionado un trabajador en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();
        
        if (filaSeleccionada != -1) {

            //2 Obtener el dni (2 columna) del trabajador seleccionado
            int rolSeleccionado = (int) jTable1.getValueAt(filaSeleccionada, 0);
            String nuevaClave= nuevaClave_tf.getText();
            if(!nuevaClave.isEmpty()){
                //3 (en hilo) Mandar un mensaje al servidor "C7-ELIMINAR_TRABAJADOR:dni"
                modificarClave(rolSeleccionado,nuevaClave);
            }else{
                error_lbl.setText("Rellene el campo de 'Nueva clave'.");
            }
            
        } else {
            this.error_lbl.setText("Selecciona un rol en la tabla.");
        }
    }//GEN-LAST:event_añadirClave_lbMouseClicked

    private void añadirClave_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_añadirClave_lbMouseEntered
        Utilidades.opcionFocusGained(evt);
    }//GEN-LAST:event_añadirClave_lbMouseEntered

    private void añadirClave_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_añadirClave_lbMouseExited
        Utilidades.opcionFocusLost(evt);
    }//GEN-LAST:event_añadirClave_lbMouseExited

    private void nuevaClave_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaClave_tfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nuevaClave_tfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel añadirClave_lb;
    private javax.swing.JLabel añadirRol_lb;
    private javax.swing.JTextField clave_tf;
    private javax.swing.JLabel eliminar_lb;
    private javax.swing.JLabel error_lbl;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel modificar_lb;
    private javax.swing.JTextField nombre_tf;
    private javax.swing.JTextField nuevaClave_tf;
    private javax.swing.JLabel nuevo_lb;
    private javax.swing.JLabel nuevo_lb1;
    private javax.swing.JLabel nuevo_lb2;
    private javax.swing.JLabel nuevo_lb3;
    private javax.swing.JTextField patronBuscar_tf;
    private javax.swing.JLabel titulo_lb;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaClaves() {
        Thread thread_cargarClaves = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C12-LISTA_CLAVES\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    System.out.println("entra");
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        error_lbl.setText("Error al cargar la tabla.");
                    } else if (respuestaServidor.contains("S19-LISTA_CLAVES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeRoles = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeRoles; i++) {
                            String parametroClave = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosClave = Utilidades.obtenerAtributosClave(parametroClave);
                            
                            defaultTableMode.addRow(atributosClave);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Claves.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarClaves.start();

    }

    
    
    
   
    private void darFormatoTabla() {
        
        defaultTableMode = (DefaultTableModel) this.jTable1.getModel();
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(74,31,61));
        jTable1.getTableHeader().setForeground(new Color(255,255,255));
        jTable1.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(),50));
        jTable1.setRowHeight(50);
        
        
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(createEmptyBorder());
        
        
        Font labelFont=patronBuscar_tf.getFont();
        
        
        jTable1.getTableHeader().setFont(new Font(labelFont.getName(), Font.PLAIN, labelFont.getSize()));
        
        
        //Cambiar barra 
        jScrollPane1.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(74,31,61);
            }
        
        });
        
        Font font = titulo_lb.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        titulo_lb.setFont(font.deriveFont(attributes));
    }

    private void cargarTablaTrabajadoresBusqueda(String patron) {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C10-LISTAR_BUSQUEDA_TRABAJADORES:"+patron+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    System.out.println("entra");
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S11-LISTA_TRABAJADORES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroTrabajador = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosTrabajador = Utilidades.obtenerTrabajador(parametroTrabajador);
                            System.out.println("fila:" + atributosTrabajador);
                            defaultTableMode.addRow(atributosTrabajador);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Claves.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();
    }

   

    private void registrarRol(String nombre, String clave) {
       Thread thread_altaTrabajador = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    outSocket.write("C13-REGISTRAR_ROL:"+nombre+","+clave+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) error_lbl.setText("Error en el registro. Pruebe con otro nombre."); 
                    else if (respuestaServidor.contains("S15-REGISTRO_COMPLETADO")){ 
                        error_lbl.setText("Rol registrado correctamente."); 
                        cargarTablaClaves();
                    }
                    else error_lbl.setText("Error en el registro. Intentelo de nuevo.");

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_altaTrabajador.start();
    }

    private void eliminarRol(int idSeleccionado) {
        Thread thread_eliminarRol = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    System.out.println("Entra Eliminar trabajador");

                        outSocket.write("C14_ELIMINAR_ROL:"+idSeleccionado+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                   
                    if (respuestaServidor.contains("S14-ERROR_ELIMINACION")) {
                        error_lbl.setText("El rol no ha podido ser eliminado en la BD. Actualice la interfaz. ");
                    } else if (respuestaServidor.contains("S13-ELIMINACION_COMPLETADA")) {
                        error_lbl.setText("Eliminacion completada exitosamente.");
                        defaultTableMode.setRowCount(0);
                        cargarTablaClaves();
                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_eliminarRol.start();
    }

    private void modificarClave(int rolSeleccionado, String nuevaClave) {
        Thread thread_ModificarClave = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    System.out.println("Entra Eliminar trabajador");

                    outSocket.write("C59_MODIFICAR_CLAVE:"+rolSeleccionado+","+nuevaClave+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                   
                    if (respuestaServidor.contains("S13-CLAVE_ACTUALIZADA")) {
                        error_lbl.setText("Clave actualizada.");
                        defaultTableMode.setRowCount(0);
                        cargarTablaClaves();
                    } else {
                        error_lbl.setText("No se puede actualizar esta clave");
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_ModificarClave.start();
    }

    

}
