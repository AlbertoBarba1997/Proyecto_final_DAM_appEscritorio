/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles;

import Interfaces.Menu_admin_interfaz;
import Util.Utilidades;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.BorderFactory.createEmptyBorder;
import javax.swing.JLabel;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juana
 */
public class pnl_Trabajadores extends javax.swing.JPanel {

    Menu_admin_interfaz interfaz_menu_padre;
    BufferedReader inSocket;
    PrintWriter outSocket;

    DefaultTableModel defaultTableMode;
    
    int filtradoRolAnterior;

    public pnl_Trabajadores(Menu_admin_interfaz interfaz_menu_padre, BufferedReader inSocket, PrintWriter outSocket) {
        initComponents();
        filtradoRolAnterior=0;
        this.interfaz_menu_padre = interfaz_menu_padre;

        this.inSocket = inSocket;
        this.outSocket = outSocket;
        System.out.println(outSocket);

        darFormatoTabla();
        

        cargarTablaTrabajadores();  //Tendria que hacerlo en un hilo o asink task
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo_lb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        eliminar_lb = new javax.swing.JLabel();
        nuevo_lb = new javax.swing.JLabel();
        modificar_lb = new javax.swing.JLabel();
        error_lbl = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        patronBuscar_tf = new javax.swing.JTextField();
        rol_combo = new javax.swing.JComboBox<>();
        nuevoRol_lb = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1390, 850));

        titulo_lb.setFont(new java.awt.Font("Ebrima", 1, 36)); // NOI18N
        titulo_lb.setForeground(new java.awt.Color(255, 255, 255));
        titulo_lb.setText("TRABAJADORES");

        jScrollPane1.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N

        jTable1.setBackground(new java.awt.Color(222, 222, 222));
        jTable1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre", "Apellido", "Salario", "Correo", "Rol"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setOpaque(false);
        jTable1.setRowHeight(38);
        jTable1.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(60);
        }

        eliminar_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        eliminar_lb.setForeground(new java.awt.Color(255, 255, 255));
        eliminar_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_remove_30px.png"))); // NOI18N
        eliminar_lb.setText("Eliminar");
        eliminar_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseExited(evt);
            }
        });

        nuevo_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        nuevo_lb.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_plus_30px.png"))); // NOI18N
        nuevo_lb.setText("Nuevo");
        nuevo_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseExited(evt);
            }
        });

        modificar_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        modificar_lb.setForeground(new java.awt.Color(255, 255, 255));
        modificar_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_edit_30px.png"))); // NOI18N
        modificar_lb.setText("Modificar");
        modificar_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                modificar_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                modificar_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                modificar_lbMouseExited(evt);
            }
        });

        error_lbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        error_lbl.setForeground(new java.awt.Color(255, 255, 255));
        error_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel1.setBackground(new java.awt.Color(74, 31, 61));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_search_30px_1.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        patronBuscar_tf.setBackground(new java.awt.Color(74, 31, 61));
        patronBuscar_tf.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        patronBuscar_tf.setForeground(new java.awt.Color(255, 255, 255));
        patronBuscar_tf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        patronBuscar_tf.setToolTipText("");
        patronBuscar_tf.setBorder(null);
        patronBuscar_tf.setCaretColor(new java.awt.Color(255, 255, 255));
        patronBuscar_tf.setOpaque(false);
        patronBuscar_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                patronBuscar_tfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patronBuscar_tfKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(patronBuscar_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(patronBuscar_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        rol_combo.setBackground(new java.awt.Color(74, 31, 61));
        rol_combo.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        rol_combo.setForeground(new java.awt.Color(255, 255, 255));
        rol_combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos los roles", "Administradores", "Entrenadores", "Otros" }));
        rol_combo.setBorder(null);
        rol_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rol_comboActionPerformed(evt);
            }
        });

        nuevoRol_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        nuevoRol_lb.setForeground(new java.awt.Color(255, 255, 255));
        nuevoRol_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_add_user_group_man_man_30px.png"))); // NOI18N
        nuevoRol_lb.setText("Nuevo Rol");
        nuevoRol_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nuevoRol_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nuevoRol_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nuevoRol_lbMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(363, 363, 363))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(rol_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titulo_lb)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(nuevo_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(eliminar_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(modificar_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(nuevoRol_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(titulo_lb)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rol_combo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo_lb)
                    .addComponent(eliminar_lb)
                    .addComponent(modificar_lb)
                    .addComponent(nuevoRol_lb))
                .addGap(66, 66, 66)
                .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nuevo_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseEntered
       opcionFocusGained(evt);
    }//GEN-LAST:event_nuevo_lbMouseEntered

    private void nuevo_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_nuevo_lbMouseExited

    private void nuevo_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseClicked
        interfaz_menu_padre.cambiarPanelContenido(new pnl_AltaTrabajador(interfaz_menu_padre, inSocket, outSocket));
    }//GEN-LAST:event_nuevo_lbMouseClicked

    private void eliminar_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_eliminar_lbMouseExited

    private void eliminar_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_eliminar_lbMouseEntered

    private void eliminar_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseClicked
        //1 Mirar si hay seleccionado un trabajador en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();
        
        if (filaSeleccionada != -1) {

            //2 Obtener el dni (2 columna) del trabajador seleccionado
            String dniSeleccionado = (String) jTable1.getValueAt(filaSeleccionada, 0);

            //3 (en hilo) Mandar un mensaje al servidor "C7-ELIMINAR_TRABAJADOR:dni"
            eliminarTrabajador(dniSeleccionado);
            
        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        
            
       
    }//GEN-LAST:event_eliminar_lbMouseClicked

    private void modificar_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modificar_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_modificar_lbMouseExited

    private void modificar_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modificar_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_modificar_lbMouseEntered

    private void modificar_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_modificar_lbMouseClicked
        //1 Mirar si hay seleccionado un trabajador en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();
        
        if (filaSeleccionada != -1) {

            //2 Obtener datos trabajador
            String dniSeleccionado = (String) jTable1.getValueAt(filaSeleccionada, 0);
            String nombre = (String) jTable1.getValueAt(filaSeleccionada, 1);
            String apellidos = (String) jTable1.getValueAt(filaSeleccionada, 2);
            float salario = (Float) jTable1.getValueAt(filaSeleccionada, 3);
            String correo = (String) jTable1.getValueAt(filaSeleccionada, 4);
            

            Object[] datosTrabajador={dniSeleccionado, nombre, apellidos,correo, salario};
            
            //3 Cambia a panel modificar con los datos del trabajador seleccionado
            interfaz_menu_padre.cambiarPanelContenido(new pnl_ModificarTrabajador(interfaz_menu_padre, inSocket, outSocket, datosTrabajador));
            
            
        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        
    }//GEN-LAST:event_modificar_lbMouseClicked

    private void patronBuscar_tfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patronBuscar_tfKeyPressed
        
    }//GEN-LAST:event_patronBuscar_tfKeyPressed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        String patron=patronBuscar_tf.getText();
        cargarTablaTrabajadoresBusqueda(patron);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void patronBuscar_tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patronBuscar_tfKeyReleased
        String patron=patronBuscar_tf.getText();
        int nRol=rol_combo.getSelectedIndex();
        char teclaPulsada=evt.getKeyChar();
        
        if(((int)teclaPulsada)==10){                                     //Si es un intro la tecla pulsada busca
            if(nRol==0) cargarTablaTrabajadoresBusqueda(patron);
            else filtrarRolTrabajador(nRol);
           
        }                           
        else if((((int)teclaPulsada)==8)&&(patron.length()<=0)){        //Si pulsa la tecla borrar y deja vacio la barra buscadora se resetea
            if(nRol==0) cargarTablaTrabajadores();
            else filtrarRolTrabajador(nRol);

        }             
        else if(patron.length()>=2){                                    //La barra busca automaticamente a partir de los 2 caracteres
            if(nRol==0) cargarTablaTrabajadoresBusqueda(patron);
            else filtrarRolTrabajador(nRol);
        }
    }//GEN-LAST:event_patronBuscar_tfKeyReleased

    private void rol_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rol_comboActionPerformed
        int indiceSeleccionado = rol_combo.getSelectedIndex();
        if(indiceSeleccionado!=filtradoRolAnterior){
        switch (indiceSeleccionado) {
                case 0:
                    //Todos los trabajadores
                    cargarTablaTrabajadoresBusqueda(patronBuscar_tf.getText());
                    break;
                    
                case 1:
                    //Filtrado por Administradores
                    filtrarRolTrabajador(1);
                    break;
                case 2:
                    //Filtrado por Entrenadores
                    filtrarRolTrabajador(2);
                    break;
                case 3:
                    //Filtrado de Otros trabajadores
                    filtrarRolTrabajador(3);
                    break;

            }
        }
        filtradoRolAnterior=indiceSeleccionado;
    }//GEN-LAST:event_rol_comboActionPerformed

    private void nuevoRol_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevoRol_lbMouseClicked
        interfaz_menu_padre.cambiarPanelContenido(new pnl_Claves(interfaz_menu_padre, inSocket, outSocket));
    }//GEN-LAST:event_nuevoRol_lbMouseClicked

    private void nuevoRol_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevoRol_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_nuevoRol_lbMouseEntered

    private void nuevoRol_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevoRol_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_nuevoRol_lbMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel eliminar_lb;
    private javax.swing.JLabel error_lbl;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel modificar_lb;
    private javax.swing.JLabel nuevoRol_lb;
    private javax.swing.JLabel nuevo_lb;
    private javax.swing.JTextField patronBuscar_tf;
    private javax.swing.JComboBox<String> rol_combo;
    private javax.swing.JLabel titulo_lb;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaTrabajadores() {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C6-LISTA_TRABAJADORES\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    System.out.println("entra");
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S11-LISTA_TRABAJADORES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroTrabajador = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosTrabajador = Utilidades.obtenerTrabajador(parametroTrabajador);
                            System.out.println("fila:" + atributosTrabajador);
                            defaultTableMode.addRow(atributosTrabajador);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();

    }

    private void eliminarTrabajador(String DNI) {
        
        Thread thread_eliminarTrabajador = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    System.out.println("Entra Eliminar trabajador");

                    outSocket.write("C7_ELIMINAR_TRABAJADOR:"+DNI+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                   
                    if (respuestaServidor.contains("S14-ERROR_ELIMINACION")) {
                        error_lbl.setText("El trabajador no ha podido ser eliminado.");
                    } else if (respuestaServidor.contains("S13-ELIMINACION_COMPLETADA")) {
                        error_lbl.setText("Eliminacion completada exitosamente.");
                        defaultTableMode.setRowCount(0);
                        cargarTablaTrabajadores();
                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_eliminarTrabajador.start();
    }
    
    
    
    private void opcionFocusGained(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void opcionFocusLost(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, -1);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void darFormatoTabla() {
        
        defaultTableMode = (DefaultTableModel) this.jTable1.getModel();
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(74,31,61));
        jTable1.getTableHeader().setForeground(new Color(255,255,255));
        jTable1.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(),50));
        jTable1.setRowHeight(50);
        
        
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(createEmptyBorder());
        rol_combo.setBorder(createEmptyBorder());
        
        Font labelFont=patronBuscar_tf.getFont();
        
        
        jTable1.getTableHeader().setFont(new Font(labelFont.getName(), Font.PLAIN, labelFont.getSize()));
        
        
        //Cambiar barra 
        jScrollPane1.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(74,31,61);
            }
        
        });
        
        Font font = titulo_lb.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        titulo_lb.setFont(font.deriveFont(attributes));
    }

    private void cargarTablaTrabajadoresBusqueda(String patron) {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C10-LISTAR_BUSQUEDA_TRABAJADORES:"+patron+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    System.out.println("entra");
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S11-LISTA_TRABAJADORES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroTrabajador = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosTrabajador = Utilidades.obtenerTrabajador(parametroTrabajador);
                            System.out.println("fila:" + atributosTrabajador);
                            defaultTableMode.addRow(atributosTrabajador);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();
    }

    private void filtrarRolTrabajador(int nRol) {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    String patronBusqueda=patronBuscar_tf.getText();
                    outSocket.write("C11-FILTRAR_TRABAJADOR_ROL:"+nRol+","+patronBusqueda+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        error_lbl.setText("Error del servidor: Base de Datos desconectada, intentelo mas tarde");
                    } else if (respuestaServidor.contains("S11-LISTA_TRABAJADORES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroTrabajador = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosTrabajador = Utilidades.obtenerTrabajador(parametroTrabajador);
                            defaultTableMode.addRow(atributosTrabajador);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();
    }

    

}
