/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles_coach;

import Paneles_Admin.*;
import Interfaces.Menu_admin_interfaz;
import Interfaces.Menu_coach_interfaz;
import Util.Utilidades;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static javax.swing.BorderFactory.createEmptyBorder;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juana
 */
public class pnl_Clases extends javax.swing.JPanel {

    Menu_coach_interfaz interfaz_menu_padre;
    BufferedReader inSocket;
    PrintWriter outSocket;

    DefaultTableModel defaultTableMode;

    int filtradoRolAnterior;

    String dniSeleccionado = null;
    String rutaFotoSeleccionada = null;

    public pnl_Clases(Menu_coach_interfaz interfaz_menu_padre, BufferedReader inSocket, PrintWriter outSocket) {
        initComponents();
        filtradoRolAnterior = 0;
        this.interfaz_menu_padre = interfaz_menu_padre;

        this.inSocket = inSocket;
        this.outSocket = outSocket;
        System.out.println(outSocket);

        darFormatoTabla();

        cargarTablaClases();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        titulo_lb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        horario_lb = new javax.swing.JLabel();
        nuevo_lb = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        descripcion_lb = new javax.swing.JLabel();
        imagen_lbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tituloclase_lb = new javax.swing.JLabel();
        aforo_lb = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        horarios_ta = new javax.swing.JTextArea();
        error_lbl = new javax.swing.JLabel();
        horario_lb1 = new javax.swing.JLabel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1390, 850));

        titulo_lb.setFont(new java.awt.Font("Leelawadee UI", 0, 48)); // NOI18N
        titulo_lb.setForeground(new java.awt.Color(255, 255, 255));
        titulo_lb.setText("CLASES");

        jScrollPane1.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jScrollPane1.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(222, 222, 222));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jTable1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clases"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setOpaque(false);
        jTable1.setRowHeight(38);
        jTable1.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(250);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(350);
        }

        horario_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        horario_lb.setForeground(new java.awt.Color(255, 255, 255));
        horario_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_remove_30px.png"))); // NOI18N
        horario_lb.setText("Eliminar clase");
        horario_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horario_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                horario_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                horario_lbMouseExited(evt);
            }
        });

        nuevo_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        nuevo_lb.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_plus_30px.png"))); // NOI18N
        nuevo_lb.setText("Crear nueva clase");
        nuevo_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseExited(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setOpaque(false);

        descripcion_lb.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        descripcion_lb.setForeground(new java.awt.Color(255, 255, 255));
        descripcion_lb.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        descripcion_lb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        imagen_lbl.setBackground(new java.awt.Color(204, 204, 204));
        imagen_lbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Descripcion:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Aforo:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Horarios disponibles:");

        tituloclase_lb.setFont(new java.awt.Font("Dialog", 1, 22)); // NOI18N
        tituloclase_lb.setForeground(new java.awt.Color(255, 255, 255));
        tituloclase_lb.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tituloclase_lb.setText("Descripcion");
        tituloclase_lb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        aforo_lb.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        aforo_lb.setForeground(new java.awt.Color(255, 255, 255));
        aforo_lb.setText(" ");
        aforo_lb.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        aforo_lb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        horarios_ta.setEditable(false);
        horarios_ta.setBackground(new java.awt.Color(60, 63, 65));
        horarios_ta.setColumns(20);
        horarios_ta.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        horarios_ta.setForeground(new java.awt.Color(255, 255, 255));
        horarios_ta.setLineWrap(true);
        horarios_ta.setRows(5);
        horarios_ta.setBorder(null);
        horarios_ta.setOpaque(false);
        jScrollPane4.setViewportView(horarios_ta);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tituloclase_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(aforo_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(descripcion_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(imagen_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(150, 150, 150))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(tituloclase_lb)
                .addGap(18, 18, 18)
                .addComponent(imagen_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aforo_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(descripcion_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        error_lbl.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        error_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        horario_lb1.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        horario_lb1.setForeground(new java.awt.Color(255, 255, 255));
        horario_lb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_calendar_30px_1.png"))); // NOI18N
        horario_lb1.setText("Organizar horario de clases");
        horario_lb1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horario_lb1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                horario_lb1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                horario_lb1MouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nuevo_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(horario_lb)
                                    .addComponent(horario_lb1)))
                            .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(titulo_lb)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(titulo_lb)
                        .addGap(87, 87, 87)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(nuevo_lb)
                        .addGap(18, 18, 18)
                        .addComponent(horario_lb)
                        .addGap(18, 18, 18)
                        .addComponent(horario_lb1)
                        .addGap(63, 63, 63)
                        .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nuevo_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_nuevo_lbMouseEntered

    private void nuevo_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_nuevo_lbMouseExited

    private void nuevo_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseClicked
        interfaz_menu_padre.cambiarPanelContenido(new pnl_AltaClase(interfaz_menu_padre, inSocket, outSocket));
    }//GEN-LAST:event_nuevo_lbMouseClicked

    private void horario_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_horario_lbMouseExited

    private void horario_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_horario_lbMouseEntered

    private void horario_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lbMouseClicked
        int filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada != -1) {

            //2 Obtener el dni (2 columna) del trabajador seleccionado
            String nombreSeleccionado = (String) jTable1.getValueAt(filaSeleccionada, 0);

            //3 (en hilo) Mandar un mensaje al servidor "C7-ELIMINAR_TRABAJADOR:dni"
            eliminarClase(nombreSeleccionado);

        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
    }//GEN-LAST:event_horario_lbMouseClicked

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed

        //1 Mirar si hay seleccionado un cliente en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada != -1) {

            //2 Obtener el dni (1 columna) del cliente seleccionado
            String claseSeleccionada = (String) jTable1.getValueAt(filaSeleccionada, 0);

            //3 Mostrar la informacion del cliente seleccionado
            mostrarDatosClase(claseSeleccionada);

        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        error_lbl.setText("");
    }//GEN-LAST:event_jTable1MousePressed

    private void horario_lb1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lb1MouseClicked
        interfaz_menu_padre.cambiarPanelContenido(new pnl_Horarios(interfaz_menu_padre, inSocket, outSocket));
    }//GEN-LAST:event_horario_lb1MouseClicked

    private void horario_lb1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lb1MouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_horario_lb1MouseEntered

    private void horario_lb1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lb1MouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_horario_lb1MouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aforo_lb;
    private javax.swing.JLabel descripcion_lb;
    private javax.swing.JLabel error_lbl;
    private javax.swing.JLabel horario_lb;
    private javax.swing.JLabel horario_lb1;
    private javax.swing.JTextArea horarios_ta;
    private javax.swing.JLabel imagen_lbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel nuevo_lb;
    private javax.swing.JLabel titulo_lb;
    private javax.swing.JLabel tituloclase_lb;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaClases() {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C22-LISTAR_CLASES\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S31-LISTA_CLASES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String nombreClase = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            String[] nombre = {nombreClase};
                            defaultTableMode.addRow(nombre);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Clases.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();

    }

    private void eliminarClase(String nombre) {

        Thread thread_eliminarClase = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1. COMPROBAR si tiene FOTO, para ELIMINARLA tambien.
                    if (rutaFotoSeleccionada != null) {
                        outSocket.write("C20_ELIMINAR_FOTO:" + rutaFotoSeleccionada + "\n");
                        outSocket.flush();
                        String respuestaServidor = inSocket.readLine();

                    }

                    //2. ELIMINAR TUPLA CLIENTE desde el servidor. 
                    outSocket.write("C24_ELIMINAR_CLASE:" + nombre + "\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();

                    if (respuestaServidor.contains("S33-CLASE_NO_ENCONTRADA")) {
                        error_lbl.setText("La clase no ha podido ser eliminada.Otro administrador debe de haberla eliminado o modificado.");
                    } else if (respuestaServidor.contains("S34-CLASE_ELIMINADA")) {
                        error_lbl.setText("Eliminacion completada exitosamente.");
                        defaultTableMode.setRowCount(0);
                        cargarTablaClases();
                    } else {
                        error_lbl.setText("Error en el servidor.Contacte con un administrador del servidor o intentelo mas tarde.");
                    }
                    vaciarDescripcion();

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Clases.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        thread_eliminarClase.setDaemon(true);
        thread_eliminarClase.start();
    }

    private void opcionFocusGained(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void opcionFocusLost(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, -1);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void darFormatoTabla() {

        defaultTableMode = (DefaultTableModel) this.jTable1.getModel();
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(74, 31, 61));
        jTable1.getTableHeader().setForeground(new Color(255, 255, 255));
        jTable1.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(), 50));
        jTable1.setRowHeight(50);

        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        //jScrollPane1.setBorder(createEmptyBorder());

        Font labelFont = tituloclase_lb.getFont();

        jTable1.getTableHeader().setFont(new Font(labelFont.getName(), Font.PLAIN, labelFont.getSize()));

        //Cambiar barra 
        jScrollPane1.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(74, 31, 61);
            }

        });

        Font font = titulo_lb.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        titulo_lb.setFont(font.deriveFont(attributes));

        //Hacer opaco el text area
        horarios_ta.setOpaque(true);
    }

    private void mostrarDatosClase(String claseSeleccionada) {
        Thread thread_mostrarCliente = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C23-MOSTRAR_CLASE:" + claseSeleccionada + "\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S32-INFO_CLASE")) {
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);  //Cuenta cuantos usuarios devuelve tras filtrar
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroCliente = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosClase = Utilidades.obtenerDatosClase(parametroCliente, "&");

                            String nombreClase = Utilidades.primeraLetraMayuscula("" + atributosClase[0]);

                            tituloclase_lb.setText(nombreClase);
                            aforo_lb.setText((String) atributosClase[1]);
                            descripcion_lb.setText((String) atributosClase[2]);
                            int idNombreSeleccionado = Integer.parseInt((String) atributosClase[3]);  //para buscar despues los horarios
                            String rutaImagen = (String) atributosClase[4];

                            if (rutaImagen.equals("")) {
                                cargarImagenNoDisponible();
                                rutaFotoSeleccionada = null;
                            } else {
                                Utilidades.mostrarImagen(rutaImagen, imagen_lbl, 360, 240);
                                rutaFotoSeleccionada = rutaImagen;
                            }

                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Clases.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            public void cargarImagenNoDisponible() {

                try {
                    File imagenNoDisponible = new File("./src/Recursos/noImage.jpg");
                    byte[] imagenTotal = Files.readAllBytes(imagenNoDisponible.toPath());
                    final int ANCHURA_IMG = 360;
                    final int ALTURA_IMG = 240;
                    ByteArrayInputStream bais = new ByteArrayInputStream(imagenTotal);
                    BufferedImage img = ImageIO.read(bais);
                    System.out.println(img);
                    BufferedImage resizedImage = Utilidades.resizeImage(img, ANCHURA_IMG, ALTURA_IMG);
                    imagen_lbl.setIcon(new ImageIcon(resizedImage));

                } catch (IOException ex) {

                }

            }

        });
        thread_mostrarCliente.setDaemon(true);
        thread_mostrarCliente.start();
    }

    public void mostrarMensajeError(String mensaje) {
        error_lbl.setText(mensaje);
    }
    public void vaciarDescripcion(){
        
        tituloclase_lb.setText("Descripccion");
        aforo_lb.setText("");
        descripcion_lb.setText("");
        //Quitar imagen
        try {
            File imagenNoDisponible = new File("./src/Recursos/noImage.jpg");
            byte[] imagenTotal = Files.readAllBytes(imagenNoDisponible.toPath());
            final int ANCHURA_IMG = 360;
            final int ALTURA_IMG = 240;
            ByteArrayInputStream bais = new ByteArrayInputStream(imagenTotal);
            BufferedImage img = ImageIO.read(bais);
            System.out.println(img);
            BufferedImage resizedImage = Utilidades.resizeImage(img, ANCHURA_IMG, ALTURA_IMG);
            imagen_lbl.setIcon(new ImageIcon(resizedImage));

        } catch (IOException ex) {

        }
    }
}
