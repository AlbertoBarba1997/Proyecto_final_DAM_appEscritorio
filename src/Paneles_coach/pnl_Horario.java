/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles_coach;

import Paneles_Admin.*;
import Interfaces.Menu_admin_interfaz;
import Interfaces.Menu_coach_interfaz;
import Util.Utilidades;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.FocusEvent;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static javax.swing.BorderFactory.createEmptyBorder;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author juana
 */
public class pnl_Horario extends javax.swing.JPanel {

    Menu_coach_interfaz interfaz_menu_padre;
    BufferedReader inSocket;
    PrintWriter outSocket;

    DefaultTableModel defaultTableMode;
    JTable[] tablasDias;
    JScrollPane[] panelesTablasDias;

    int filtradoRolAnterior;

    String dniSeleccionado = null;
    String rutaFotoSeleccionada = null;

    public pnl_Horario(Menu_coach_interfaz interfaz_menu_padre, BufferedReader inSocket, PrintWriter outSocket){
        initComponents();
        filtradoRolAnterior = 0;
        this.interfaz_menu_padre = interfaz_menu_padre;

        this.inSocket = inSocket;
        this.outSocket = outSocket;
        System.out.println(outSocket);

        tablasDias=inicializarTablasDias();
        panelesTablasDias=inicializarScrolPanelDias();
        darFormatoTabla();
        
        cargarTablasHorarios();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        titulo_lb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        eliminar_lb = new javax.swing.JLabel();
        nuevo_lb = new javax.swing.JLabel();
        error_lbl = new javax.swing.JLabel();
        restablecer_lb = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        clases_tb = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        entrenadores_tb = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        horario_lb2 = new javax.swing.JLabel();
        dia_cb = new javax.swing.JComboBox<>();
        hora_cb = new javax.swing.JComboBox<>();
        error_lb = new javax.swing.JLabel();
        Agregar_bt = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1390, 850));

        titulo_lb.setFont(new java.awt.Font("Leelawadee UI", 0, 48)); // NOI18N
        titulo_lb.setForeground(new java.awt.Color(255, 255, 255));
        titulo_lb.setText("HORARIO");

        jScrollPane1.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(222, 222, 222));
        jTable1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Clase", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setOpaque(false);
        jTable1.setRowHeight(38);
        jTable1.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setMinWidth(125);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(125);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(125);
            jTable1.getColumnModel().getColumn(2).setMinWidth(0);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        eliminar_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        eliminar_lb.setForeground(new java.awt.Color(255, 255, 255));
        eliminar_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_remove_30px.png"))); // NOI18N
        eliminar_lb.setText("Quitar clase seleccionada");
        eliminar_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eliminar_lbMouseExited(evt);
            }
        });

        nuevo_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        nuevo_lb.setForeground(new java.awt.Color(255, 255, 255));
        nuevo_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_new_30px.png"))); // NOI18N
        nuevo_lb.setText("Crear nueva clase");
        nuevo_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nuevo_lbMouseExited(evt);
            }
        });

        error_lbl.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        error_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        restablecer_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        restablecer_lb.setForeground(new java.awt.Color(255, 255, 255));
        restablecer_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_delete_30px.png"))); // NOI18N
        restablecer_lb.setText("Restablecer horario");
        restablecer_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restablecer_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                restablecer_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                restablecer_lbMouseExited(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane2.setBorder(null);
        jScrollPane2.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        jTable2.setBackground(new java.awt.Color(222, 222, 222));
        jTable2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable2.setForeground(new java.awt.Color(0, 0, 0));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Clase", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setGridColor(new java.awt.Color(255, 255, 255));
        jTable2.setOpaque(false);
        jTable2.setRowHeight(38);
        jTable2.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable2.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(1).setMinWidth(125);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(125);
            jTable2.getColumnModel().getColumn(1).setMaxWidth(125);
            jTable2.getColumnModel().getColumn(2).setMinWidth(0);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable2.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jScrollPane3.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane3.setBorder(null);
        jScrollPane3.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseClicked(evt);
            }
        });

        jTable3.setBackground(new java.awt.Color(222, 222, 222));
        jTable3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable3.setForeground(new java.awt.Color(0, 0, 0));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Clase", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable3.setGridColor(new java.awt.Color(255, 255, 255));
        jTable3.setOpaque(false);
        jTable3.setRowHeight(38);
        jTable3.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable3.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable3MousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(1).setMinWidth(125);
            jTable3.getColumnModel().getColumn(1).setPreferredWidth(125);
            jTable3.getColumnModel().getColumn(1).setMaxWidth(125);
            jTable3.getColumnModel().getColumn(2).setMinWidth(0);
            jTable3.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable3.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jScrollPane4.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane4.setBorder(null);
        jScrollPane4.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane4MouseClicked(evt);
            }
        });

        jTable4.setBackground(new java.awt.Color(222, 222, 222));
        jTable4.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable4.setForeground(new java.awt.Color(0, 0, 0));
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Clase", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setGridColor(new java.awt.Color(255, 255, 255));
        jTable4.setOpaque(false);
        jTable4.setRowHeight(38);
        jTable4.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable4.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable4MousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(1).setMinWidth(125);
            jTable4.getColumnModel().getColumn(1).setPreferredWidth(125);
            jTable4.getColumnModel().getColumn(1).setMaxWidth(125);
            jTable4.getColumnModel().getColumn(2).setMinWidth(0);
            jTable4.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable4.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jScrollPane5.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane5.setBorder(null);
        jScrollPane5.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane5MouseClicked(evt);
            }
        });

        jTable5.setBackground(new java.awt.Color(222, 222, 222));
        jTable5.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable5.setForeground(new java.awt.Color(0, 0, 0));
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Clase", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable5.setGridColor(new java.awt.Color(255, 255, 255));
        jTable5.setOpaque(false);
        jTable5.setRowHeight(38);
        jTable5.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable5.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable5MousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);
        if (jTable5.getColumnModel().getColumnCount() > 0) {
            jTable5.getColumnModel().getColumn(1).setMinWidth(125);
            jTable5.getColumnModel().getColumn(1).setPreferredWidth(125);
            jTable5.getColumnModel().getColumn(1).setMaxWidth(125);
            jTable5.getColumnModel().getColumn(2).setMinWidth(0);
            jTable5.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable5.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jScrollPane6.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane6.setBorder(null);
        jScrollPane6.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane6MouseClicked(evt);
            }
        });

        jTable6.setBackground(new java.awt.Color(222, 222, 222));
        jTable6.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable6.setForeground(new java.awt.Color(0, 0, 0));
        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Clase", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable6.setGridColor(new java.awt.Color(255, 255, 255));
        jTable6.setOpaque(false);
        jTable6.setRowHeight(38);
        jTable6.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable6.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable6MousePressed(evt);
            }
        });
        jScrollPane6.setViewportView(jTable6);
        if (jTable6.getColumnModel().getColumnCount() > 0) {
            jTable6.getColumnModel().getColumn(1).setMinWidth(125);
            jTable6.getColumnModel().getColumn(1).setPreferredWidth(125);
            jTable6.getColumnModel().getColumn(1).setMaxWidth(125);
            jTable6.getColumnModel().getColumn(2).setMinWidth(0);
            jTable6.getColumnModel().getColumn(2).setPreferredWidth(0);
            jTable6.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("LUNES");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("MARTES");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("MIERCOLES");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("JUEVES");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("SABADO");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("VIERNES");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setOpaque(false);

        jScrollPane7.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jScrollPane7.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane7.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane7MouseClicked(evt);
            }
        });

        clases_tb.setBackground(new java.awt.Color(222, 222, 222));
        clases_tb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        clases_tb.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        clases_tb.setForeground(new java.awt.Color(0, 0, 0));
        clases_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Zumba",  new Integer(1)}
            },
            new String [] {
                "Clases registradas", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        clases_tb.setGridColor(new java.awt.Color(255, 255, 255));
        clases_tb.setOpaque(false);
        clases_tb.setRowHeight(38);
        clases_tb.setSelectionBackground(new java.awt.Color(101, 58, 88));
        clases_tb.setSelectionForeground(new java.awt.Color(255, 255, 255));
        clases_tb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                clases_tbMousePressed(evt);
            }
        });
        jScrollPane7.setViewportView(clases_tb);
        if (clases_tb.getColumnModel().getColumnCount() > 0) {
            clases_tb.getColumnModel().getColumn(1).setMinWidth(0);
            clases_tb.getColumnModel().getColumn(1).setPreferredWidth(0);
            clases_tb.getColumnModel().getColumn(1).setMaxWidth(0);
        }

        jScrollPane8.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jScrollPane8.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane8.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane8MouseClicked(evt);
            }
        });

        entrenadores_tb.setBackground(new java.awt.Color(222, 222, 222));
        entrenadores_tb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        entrenadores_tb.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        entrenadores_tb.setForeground(new java.awt.Color(0, 0, 0));
        entrenadores_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Paco Fuertaco",  new Integer(4)}
            },
            new String [] {
                "Entrenadores", "id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        entrenadores_tb.setGridColor(new java.awt.Color(255, 255, 255));
        entrenadores_tb.setOpaque(false);
        entrenadores_tb.setRowHeight(38);
        entrenadores_tb.setSelectionBackground(new java.awt.Color(101, 58, 88));
        entrenadores_tb.setSelectionForeground(new java.awt.Color(255, 255, 255));
        entrenadores_tb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                entrenadores_tbMousePressed(evt);
            }
        });
        jScrollPane8.setViewportView(entrenadores_tb);
        if (entrenadores_tb.getColumnModel().getColumnCount() > 0) {
            entrenadores_tb.getColumnModel().getColumn(1).setMinWidth(0);
            entrenadores_tb.getColumnModel().getColumn(1).setPreferredWidth(0);
            entrenadores_tb.getColumnModel().getColumn(1).setMaxWidth(0);
        }

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Día:");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Hora:");

        horario_lb2.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        horario_lb2.setForeground(new java.awt.Color(255, 255, 255));
        horario_lb2.setText("Añadir hora de clase");
        horario_lb2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                horario_lb2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                horario_lb2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                horario_lb2MouseExited(evt);
            }
        });

        dia_cb.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dia_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado" }));

        hora_cb.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        hora_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "08:15", "08:30", "08:45", "09:00", "09:15", "09:30", "09:45", "10:00", "10:15", "10:30", "10:45", "11:00", "11:15", "11:30", "11:45", "12:00", "12:15", "12:30", "12:45", "13:00", "13:15", "13:30", "13:45", "14:00", "14:15", "14:30", "14:45", "15:00", "15:15", "15:30", "15:45", "16:00", "16:15", "16:30", "16:45", "17:00", "17:15", "17:30", "17:45", "18:00", "18:15", "18:30", "18:45", "19:00", "19:15", "19:30", "19:45", "20:00", "20:15", "20:30", "20:45", "21:00", "21:15", "21:30", "21:45", "22:00", " " }));

        error_lb.setForeground(new java.awt.Color(255, 255, 204));
        error_lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Agregar_bt.setText("AGREGAR");
        Agregar_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Agregar_btActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(error_lb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel7)
                                        .addComponent(dia_cb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(hora_cb, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                .addComponent(Agregar_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(horario_lb2)))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(horario_lb2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dia_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel8))
                            .addComponent(Agregar_bt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hora_cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(error_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(titulo_lb)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel1)
                .addGap(145, 145, 145)
                .addComponent(jLabel2)
                .addGap(130, 130, 130)
                .addComponent(jLabel3)
                .addGap(134, 134, 134)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(132, 132, 132)
                .addComponent(jLabel5)
                .addGap(102, 102, 102))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(232, 232, 232)))
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eliminar_lb)
                .addGap(50, 50, 50)
                .addComponent(restablecer_lb)
                .addGap(50, 50, 50)
                .addComponent(nuevo_lb, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(330, 330, 330))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(titulo_lb)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo_lb)
                    .addComponent(restablecer_lb)
                    .addComponent(eliminar_lb))
                .addGap(43, 43, 43)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nuevo_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_nuevo_lbMouseEntered

    private void nuevo_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_nuevo_lbMouseExited

    private void nuevo_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nuevo_lbMouseClicked
        interfaz_menu_padre.cambiarPanelContenido(new pnl_AltaClase(interfaz_menu_padre, inSocket, outSocket));
    }//GEN-LAST:event_nuevo_lbMouseClicked

    private void eliminar_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_eliminar_lbMouseExited

    private void eliminar_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_eliminar_lbMouseEntered

    private void eliminar_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminar_lbMouseClicked
        for(JTable tabla:tablasDias){
            int filaSeleccionada=tabla.getSelectedRow();
            //1. Comprobar tabla a tabla si hay alguna con un horario seleccioando
            if (filaSeleccionada != -1) {
                //2. Si es asi, extraemos el id del horario que deseamos eliminar
                int idHorarioSeleccionado = (int) jTable1.getValueAt(filaSeleccionada, 2);  //(Este id esta almacenado en la tabla ya, en una columna invisible)

                //3 (en hilo) Mandar un mensaje al servidor "C30-ELIMINAR_HORARIO:id"
                eliminarHorario(idHorarioSeleccionado);

            } else {
                this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        }
    }//GEN-LAST:event_eliminar_lbMouseClicked

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed

        //1 Mirar si hay seleccionado un cliente en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada != -1) {

            //2 Obtener el dni (1 columna) del cliente seleccionado
            String claseSeleccionada = (String) jTable1.getValueAt(filaSeleccionada, 0);

            //3 Mostrar la informacion del cliente seleccionado
            

        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        error_lbl.setText("");
    }//GEN-LAST:event_jTable1MousePressed

    private void restablecer_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restablecer_lbMouseClicked
        int opcion=JOptionPane.showConfirmDialog(null, "¿Estas seguro de que desea eliminar todos los registros del horario?","Confirmar",0);  //0->Si  1->No
        if(opcion==0){
            restablecerHorario();
        }
        
        
    }//GEN-LAST:event_restablecer_lbMouseClicked

    private void restablecer_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restablecer_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_restablecer_lbMouseEntered

    private void restablecer_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restablecer_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_restablecer_lbMouseExited

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MousePressed

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void jTable3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable3MousePressed

    private void jScrollPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane3MouseClicked

    private void jTable4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable4MousePressed

    private void jScrollPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane4MouseClicked

    private void jTable5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable5MousePressed

    private void jScrollPane5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane5MouseClicked

    private void jTable6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable6MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable6MousePressed

    private void jScrollPane6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane6MouseClicked

    private void clases_tbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clases_tbMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_clases_tbMousePressed

    private void jScrollPane7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane7MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane7MouseClicked

    private void entrenadores_tbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entrenadores_tbMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_entrenadores_tbMousePressed

    private void jScrollPane8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane8MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane8MouseClicked

    private void horario_lb2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lb2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_horario_lb2MouseClicked

    private void horario_lb2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lb2MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_horario_lb2MouseEntered

    private void horario_lb2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horario_lb2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_horario_lb2MouseExited

    private void Agregar_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Agregar_btActionPerformed
        
        int idClaseSeleccionada;
        int idEntrenadorSeleccionado;
        int numeroDiaSeleccionado;
        String horaSeleccionada;
        
        try{
            idClaseSeleccionada=(int) clases_tb.getModel().getValueAt(clases_tb.getSelectedRow(), 1);
            idEntrenadorSeleccionado= (int) entrenadores_tb.getModel().getValueAt(entrenadores_tb.getSelectedRow(), 1);
            
        }catch(ArrayIndexOutOfBoundsException aioe){
            showMessageDialog(null, "Debe seleccionar la clase y el entrenador que la va a impartir en sus respectivas tablas.");
            return;
        }
        
        numeroDiaSeleccionado=dia_cb.getSelectedIndex()+1;
        horaSeleccionada=(String)hora_cb.getSelectedItem();
        //System.out.println("IdClase:"+idClaseSeleccionada+"  IdEntrenador:"+idEntrenadorSeleccionado+ "  numeroDiaSeleccionado:"+numeroDiaSeleccionado+ "  horaSeleccionada:"+horaSeleccionada);
        altaHorario(idClaseSeleccionada,idEntrenadorSeleccionado,numeroDiaSeleccionado,horaSeleccionada);
       
        
    }//GEN-LAST:event_Agregar_btActionPerformed

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
         desmarcarFilaTabla(evt);
    }//GEN-LAST:event_jTable1FocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Agregar_bt;
    private javax.swing.JTable clases_tb;
    private javax.swing.JComboBox<String> dia_cb;
    private javax.swing.JLabel eliminar_lb;
    private javax.swing.JTable entrenadores_tb;
    private javax.swing.JLabel error_lb;
    private javax.swing.JLabel error_lbl;
    private javax.swing.JComboBox<String> hora_cb;
    private javax.swing.JLabel horario_lb2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JLabel nuevo_lb;
    private javax.swing.JLabel restablecer_lb;
    private javax.swing.JLabel titulo_lb;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaClases() {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C22-LISTAR_CLASES\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S31-LISTA_CLASES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String nombreClase = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            String[] nombre = {nombreClase};
                            defaultTableMode.addRow(nombre);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Horario.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();

    }
    
    private void eliminarHorario(int idHorario) {
        Thread thread_eliminarHorario = new Thread(new Runnable() {
            @Override
            public void run() {
                try { 
                    outSocket.write("C30_ELIMINAR_HORARIO:" + idHorario + "\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();

                    if (respuestaServidor.contains("S40-HORARIO_ELIMINADO")) {
                        cargarTablasHorarios();
                    } else if (respuestaServidor.contains("S41-ERROR_ELIMINACION")) {
                        
                        try{
                            String mensajeError=Utilidades.obtenerParametro(respuestaServidor, 1);
                            showMessageDialog(null, "Error al eliminar:"+mensajeError);
                        }catch (Exception e) {
                            showMessageDialog(null, "Error desconocido. Pongase en contacto con un tecnico.");
                        }
                        cargarTablasHorarios();
                    }
                    

                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
        thread_eliminarHorario.setDaemon(true);
        thread_eliminarHorario.start();
    }

    private void opcionFocusGained(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void opcionFocusLost(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, -1);
        labelFocus.setFont(font.deriveFont(attributes));
    }
    

    private void darFormatoTabla() {
        
        Font labelFont = nuevo_lb.getFont();
        
        //Dar formato a las 6 TABLAS DE CADA DIA
        for (int i = 0; i < tablasDias.length; i++) {
            JTable tabla = tablasDias[i];
            JScrollPane panel = panelesTablasDias[i];

            defaultTableMode = (DefaultTableModel) tabla.getModel();
            tabla.getTableHeader().setOpaque(false);
            tabla.getTableHeader().setBackground(new Color(74, 31, 61));
            tabla.getTableHeader().setForeground(new Color(255, 255, 255));
            tabla.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(), 40));
            tabla.setRowHeight(40);
            panel.setOpaque(false);
            panel.getViewport().setOpaque(false);
            //jScrollPane1.setBorder(createEmptyBorder());
            
            tabla.getTableHeader().setFont(new Font(labelFont.getName(), Font.PLAIN, labelFont.getSize() - 2));
            //Cambiar barra 
            panel.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
                @Override
                protected void configureScrollBarColors() {
                    this.thumbColor = new Color(74, 31, 61);
                }
            });

           
       }
        
        //TABLA CLASES
        clases_tb.getTableHeader().setFont(new Font(labelFont.getName(), Font.BOLD, labelFont.getSize()-2));
        clases_tb.getTableHeader().setOpaque(false);
        clases_tb.getTableHeader().setBackground(new Color(74, 31, 61));
        clases_tb.getTableHeader().setForeground(new Color(255, 255, 255));
        clases_tb.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(), 40));
        clases_tb.setRowHeight(40);
        jScrollPane7.setOpaque(false);
        jScrollPane7.getViewport().setOpaque(false);
        jScrollPane7.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(74, 31, 61);
            }
        });
        
        System.out.println(clases_tb.getModel().getValueAt(0, 1));
        
        
        //TABLA 8
        entrenadores_tb.getTableHeader().setFont(new Font(labelFont.getName(), Font.BOLD, labelFont.getSize()-2));
        entrenadores_tb.getTableHeader().setOpaque(false);
        entrenadores_tb.getTableHeader().setBackground(new Color(74, 31, 61));
        entrenadores_tb.getTableHeader().setForeground(new Color(255, 255, 255));
        entrenadores_tb.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(), 40));
        entrenadores_tb.setRowHeight(40);
        jScrollPane8.setOpaque(false);
        jScrollPane8.getViewport().setOpaque(false);
        jScrollPane8.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(74, 31, 61);
            }

        });
        
        
        
        //TITULO
        Font font = titulo_lb.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        titulo_lb.setFont(font.deriveFont(attributes));

        
    }

    

    public void mostrarMensajeError(String mensaje) {
        error_lbl.setText(mensaje);
    }

    public void cargarTablaClasesDisponibles() {
        Thread thread_cargarClases = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C26-LISTAR_CLASE_DISPONIBLE\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S36-LISTA_CLASES")) {
                        
                        DefaultTableModel modeloTablaClases=(DefaultTableModel)clases_tb.getModel();
                        modeloTablaClases.setRowCount(0);
                        
                        int numeroDeHorarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeHorarios; i++) {
                            String cadenaDatosHorario = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosHorario = Utilidades.obtenerClase(cadenaDatosHorario);
                            int id=Integer.parseInt((String)atributosHorario[0]);
                            String nombre=(String)atributosHorario[1];
                            Object[] fila={nombre,id};
                            modeloTablaClases.addRow(fila);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Clases.class.getName()).log(Level.SEVERE, null, ex);
                }
                cargarTablaEntrenadores();
            }

            private void añadirFilaTablaHorarios(String[] atributosHorario) {
                int idHorario=Integer.parseInt(atributosHorario[0]);
                int dia=Integer.parseInt(atributosHorario[1]);
                String hora=atributosHorario[2];
                String nombreClase=atributosHorario[3];
                
                JTable tablaDiaCorrespondiente=tablasDias[dia-1];  //Segun el numero del dia lo colocara en una tabla u otra (dia=2->Martes)
                DefaultTableModel defaultTableMode = (DefaultTableModel) tablaDiaCorrespondiente.getModel();
                
                Object[] fila={hora,nombreClase,idHorario};
                defaultTableMode.addRow(fila);
                
            }

           
        });
        thread_cargarClases.setDaemon(true);
        thread_cargarClases.start();
        
    }

    public void cargarTablaEntrenadores() {
        Thread thread_cargarEntrenadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C27-LISTAR_ENTRENADORES\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S37-LISTA_ENTRENADORES")) {
                        
                        DefaultTableModel modeloTablaEntrenadores=(DefaultTableModel)entrenadores_tb.getModel();
                        modeloTablaEntrenadores.setRowCount(0);
                        
                        int numeroDeHorarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeHorarios; i++) {
                            String cadenaDatosHorario = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosHorario = Utilidades.obtenerEntrenadores(cadenaDatosHorario);
                            int id=Integer.parseInt((String)atributosHorario[0]);
                            String nombre=(String)atributosHorario[1];
                            String apellidos=(String)atributosHorario[2];
                            Object[] fila={nombre+" "+apellidos,id};
                            modeloTablaEntrenadores.addRow(fila);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Clases.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                    
                
            }

            private void añadirFilaTablaHorarios(String[] atributosHorario) {
                int idHorario=Integer.parseInt(atributosHorario[0]);
                int dia=Integer.parseInt(atributosHorario[1]);
                String hora=atributosHorario[2];
                String nombreClase=atributosHorario[3];
                
                JTable tablaDiaCorrespondiente=tablasDias[dia-1];  //Segun el numero del dia lo colocara en una tabla u otra (dia=2->Martes)
                DefaultTableModel defaultTableMode = (DefaultTableModel) tablaDiaCorrespondiente.getModel();
                
                Object[] fila={hora,nombreClase,idHorario};
                defaultTableMode.addRow(fila);
                
            }

           
        });
        thread_cargarEntrenadores.setDaemon(true);
        thread_cargarEntrenadores.start();
    }

    private void cargarTablasHorarios() {
        Thread thread_cargarHorarios = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C25-LISTAR_HORARIO\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S35-HORARIO")) {
                        defaultTableMode.setRowCount(0);
                        resetearDias();
                        int numeroDeHorarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeHorarios; i++) {
                            String cadenaDatosHorario = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            String[] atributosHorario = Utilidades.obtenerHorario(cadenaDatosHorario);
                            //System.out.println("fila:" + atributosHorario[0]+"......"+ atributosHorario[1]+"......"+ atributosHorario[2]+"......"+ atributosHorario[3]+"......");
                            //Selecionar la tabla correspondiente (Lunes, martes, miercoles...) segun el dia indicado en el parametro(1,2,3...)
                            int dia=Integer.parseInt(atributosHorario[1]);
                            JTable tablaDiaCorrespondiente=tablasDias[dia-1];  //Segun el numero del dia lo colocara en una tabla u otra (dia=2->Martes)
                            DefaultTableModel tablaAfectada = (DefaultTableModel) tablaDiaCorrespondiente.getModel();
                            añadirFilaTablaHorarios(atributosHorario,tablaAfectada);  //Segun el numero de dia que venga en el segundo parametro, lo pondra en la tabla de su dia correspondiente (2->Martes)
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_Clases.class.getName()).log(Level.SEVERE, null, ex);
                }
                cargarTablaClasesDisponibles();
            }

            private void añadirFilaTablaHorarios(String[] atributosHorario,  DefaultTableModel tablaAfectada) {
                int idHorario=Integer.parseInt(atributosHorario[0]);
                String hora=atributosHorario[2];
                String nombreClase=atributosHorario[3];
                
                Object[] fila={hora,nombreClase,idHorario};
                tablaAfectada.addRow(fila);
                
            }

            private void resetearDias() {
                //Recorre todas las tablas de los dias y elimina todas las filas
                for (JTable tabla : tablasDias) {
                    DefaultTableModel tablaModel = (DefaultTableModel) tabla.getModel();
                    tablaModel.setRowCount(0);
                }
            }
            
            
           
        });
        thread_cargarHorarios.setDaemon(true);
        thread_cargarHorarios.start();
        
        
        
    }

    private JTable[] inicializarTablasDias() {
        JTable[] tablas={jTable1,jTable2,jTable3,jTable4,jTable5,jTable6};
        return tablas;    
    }

    private JScrollPane[] inicializarScrolPanelDias() {
        JScrollPane[] paneles={jScrollPane1,jScrollPane2,jScrollPane3,jScrollPane4,jScrollPane5,jScrollPane6};
        return paneles;
    }

    private void altaHorario(int idClase, int idEntrenador, int numeroDia, String hora) {
        Thread thread_altaHorario = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    outSocket.write("C28-ALTA_HORARIO:"+idClase+","+idEntrenador+","+numeroDia+","+hora+"\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    
                    
                    if (respuestaServidor.contains("S38-HORARIO_REGISTRADO")){
                        error_lb.setText("Clase añadida al horario.");
                        cargarTablasHorarios();
                    } else if (respuestaServidor.contains("S39-ERROR_REGISTRO")) {
                        
                        try{
                            String mensajeError=Utilidades.obtenerParametro(respuestaServidor, 1);
                            showMessageDialog(null, "Error al registrar:"+mensajeError);
                        }catch (Exception e) {
                            showMessageDialog(null, "Error desconocido. Pongase en contacto con un tecnico.");
                        }
                        cargarTablasHorarios();
                        
                    } else {
                        showMessageDialog(null,"Error de comunicacion con el servidor, pongase en contacto con un tecnico del sistema");
                        cargarTablasHorarios();
                    }


                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_altaHorario.setDaemon(true);
        thread_altaHorario.start();
    }

    private void restablecerHorario() {
        Thread thread_restablecerHorario = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    outSocket.write("C29-RESTBLECER_HORARIO\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    cargarTablasHorarios();
                    
                } catch (IOException ex) {
                    Logger.getLogger(pnl_Trabajadores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_restablecerHorario.setDaemon(true);
        thread_restablecerHorario.start();
    }

    private void desmarcarFilaTabla(FocusEvent evt) {
        try{
            JTable tabla=(JTable)evt.getComponent();
            tabla.clearSelection();
        }catch(Exception e){
            
        }

    }

    

}


