/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Paneles_coach;

import Paneles_Admin.*;
import Interfaces.Menu_admin_interfaz;
import Interfaces.Menu_coach_interfaz;
import Util.Utilidades;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static javax.swing.BorderFactory.createEmptyBorder;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author juana
 */
public class pnl_VerClientes extends javax.swing.JPanel {

    Menu_coach_interfaz interfaz_menu_padre;
    BufferedReader inSocket;
    PrintWriter outSocket;

    DefaultTableModel defaultTableMode;

    int filtradoRolAnterior;
    
    String dniSeleccionado=null;
    String rutaFotoSeleccionada=null;

    public pnl_VerClientes(Menu_coach_interfaz interfaz_menu_padre, BufferedReader inSocket, PrintWriter outSocket) {
        initComponents();
        filtradoRolAnterior = 0;
        this.interfaz_menu_padre = interfaz_menu_padre;

        this.inSocket = inSocket;
        this.outSocket = outSocket;
        System.out.println(outSocket);

        darFormatoTabla();

        cargarTablaClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo_lb = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        asignarTablaModelo_lb = new javax.swing.JLabel();
        error_lbl = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        patronBuscar_tf = new javax.swing.JTextField();
        CrearTablaPersonalizada_lb2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        fecha_lbl = new javax.swing.JLabel();
        notas_lbl = new javax.swing.JLabel();
        altura_lbl = new javax.swing.JLabel();
        imagen_lbl = new javax.swing.JLabel();
        dni_lbl = new javax.swing.JLabel();
        nombre_lbl = new javax.swing.JLabel();
        apellido_lbl = new javax.swing.JLabel();
        peso_lbl = new javax.swing.JLabel();

        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1390, 850));

        titulo_lb.setFont(new java.awt.Font("Ebrima", 1, 36)); // NOI18N
        titulo_lb.setForeground(new java.awt.Color(255, 255, 255));
        titulo_lb.setText("CLIENTES");

        jScrollPane1.setBackground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setBorder(null);
        jScrollPane1.setForeground(new java.awt.Color(74, 31, 61));
        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(222, 222, 222));
        jTable1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre", "Apellido", "Correo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setOpaque(false);
        jTable1.setRowHeight(38);
        jTable1.setSelectionBackground(new java.awt.Color(101, 58, 88));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(200);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(250);
            jTable1.getColumnModel().getColumn(1).setMinWidth(250);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(350);
            jTable1.getColumnModel().getColumn(2).setMinWidth(380);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(300);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(450);
            jTable1.getColumnModel().getColumn(3).setMinWidth(500);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(500);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(600);
        }

        asignarTablaModelo_lb.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        asignarTablaModelo_lb.setForeground(new java.awt.Color(255, 255, 255));
        asignarTablaModelo_lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_muscle_30px.png"))); // NOI18N
        asignarTablaModelo_lb.setText("Asignar rutina modelo");
        asignarTablaModelo_lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                asignarTablaModelo_lbMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                asignarTablaModelo_lbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                asignarTablaModelo_lbMouseExited(evt);
            }
        });

        error_lbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        error_lbl.setForeground(new java.awt.Color(255, 255, 255));
        error_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel1.setBackground(new java.awt.Color(74, 31, 61));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_search_30px_1.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        patronBuscar_tf.setBackground(new java.awt.Color(74, 31, 61));
        patronBuscar_tf.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        patronBuscar_tf.setForeground(new java.awt.Color(255, 255, 255));
        patronBuscar_tf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        patronBuscar_tf.setToolTipText("");
        patronBuscar_tf.setBorder(null);
        patronBuscar_tf.setCaretColor(new java.awt.Color(255, 255, 255));
        patronBuscar_tf.setOpaque(false);
        patronBuscar_tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patronBuscar_tfKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(patronBuscar_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(patronBuscar_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        CrearTablaPersonalizada_lb2.setFont(new java.awt.Font("Dialog", 2, 18)); // NOI18N
        CrearTablaPersonalizada_lb2.setForeground(new java.awt.Color(255, 255, 255));
        CrearTablaPersonalizada_lb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/icons8_new_30px.png"))); // NOI18N
        CrearTablaPersonalizada_lb2.setText("Crear tabla personalizada");
        CrearTablaPersonalizada_lb2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CrearTablaPersonalizada_lb2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CrearTablaPersonalizada_lb2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CrearTablaPersonalizada_lb2MouseExited(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setOpaque(false);

        fecha_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        fecha_lbl.setForeground(new java.awt.Color(255, 255, 255));
        fecha_lbl.setText("Fecha de nacimiento:");

        notas_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        notas_lbl.setForeground(new java.awt.Color(255, 255, 255));
        notas_lbl.setText("Notas:");
        notas_lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        altura_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        altura_lbl.setForeground(new java.awt.Color(255, 255, 255));
        altura_lbl.setText("Altura:");

        imagen_lbl.setBackground(new java.awt.Color(204, 204, 204));
        imagen_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagen_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/user-male.png"))); // NOI18N

        dni_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        dni_lbl.setForeground(new java.awt.Color(255, 255, 255));
        dni_lbl.setText("DNI:");

        nombre_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        nombre_lbl.setForeground(new java.awt.Color(255, 255, 255));
        nombre_lbl.setText("Nombre:");

        apellido_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        apellido_lbl.setForeground(new java.awt.Color(255, 255, 255));
        apellido_lbl.setText("Apellidos:");

        peso_lbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        peso_lbl.setForeground(new java.awt.Color(255, 255, 255));
        peso_lbl.setText("Peso: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 633, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(altura_lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(notas_lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dni_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fecha_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                        .addComponent(nombre_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(apellido_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(peso_lbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addComponent(imagen_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(50, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(imagen_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(dni_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(nombre_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(apellido_lbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(fecha_lbl)
                            .addGap(12, 12, 12)
                            .addComponent(peso_lbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(altura_lbl)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(notas_lbl)))
                    .addContainerGap(28, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titulo_lb))
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CrearTablaPersonalizada_lb2)
                .addGap(26, 26, 26)
                .addComponent(asignarTablaModelo_lb)
                .addGap(445, 445, 445))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(359, 359, 359))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(titulo_lb)
                .addGap(16, 16, 16)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asignarTablaModelo_lb)
                    .addComponent(CrearTablaPersonalizada_lb2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(error_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        String patron = patronBuscar_tf.getText();
        cargarTablaClientesBusqueda(patron);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void patronBuscar_tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patronBuscar_tfKeyReleased
        String patron = patronBuscar_tf.getText();
        char teclaPulsada = evt.getKeyChar();

        if (((int) teclaPulsada) == 10) {                                     //Si es un intro (tecla 10) la tecla pulsada busca
            cargarTablaClientesBusqueda(patron);

        } else if ((((int) teclaPulsada) == 8) && (patron.length() <= 0)) {        //Si pulsa la tecla borrar y deja vacio la barra buscadora se resetea
            cargarTablaClientes();

        } else if (patron.length() >= 2) {                                    //La barra busca automaticamente a partir de los 2 caracteres
            cargarTablaClientesBusqueda(patron);

        }
    }//GEN-LAST:event_patronBuscar_tfKeyReleased

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        

        //1 Mirar si hay seleccionado un cliente en la tabla
        int filaSeleccionada = jTable1.getSelectedRow();

        if (filaSeleccionada != -1) {

            //2 Obtener el dni (1 columna) del cliente seleccionado
            String dniSeleccionado = (String) jTable1.getValueAt(filaSeleccionada, 0);

            //3 Mostrar la informacion del cliente seleccionado
            mostrarDatosCliente(dniSeleccionado);

        } else {
            this.error_lbl.setText("Selecciona un trabajador primero.");
        }
        error_lbl.setText("");
    }//GEN-LAST:event_jTable1MousePressed

    private void asignarTablaModelo_lbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_asignarTablaModelo_lbMouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_asignarTablaModelo_lbMouseExited

    private void asignarTablaModelo_lbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_asignarTablaModelo_lbMouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_asignarTablaModelo_lbMouseEntered

    private void asignarTablaModelo_lbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_asignarTablaModelo_lbMouseClicked
        
         interfaz_menu_padre.cambiarPanelContenido(new pnl_Rutinas(interfaz_menu_padre, inSocket, outSocket));
        
    }//GEN-LAST:event_asignarTablaModelo_lbMouseClicked

    private void CrearTablaPersonalizada_lb2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearTablaPersonalizada_lb2MouseClicked
        String dni=null;
        try{
            int filaSeleccionada = jTable1.getSelectedRow();

            if (filaSeleccionada != -1) {
                dni = (String) jTable1.getValueAt(filaSeleccionada, 0);
            }

        }catch(Exception e){
            
        }
        if (dni != null) {
            interfaz_menu_padre.cambiarPanelContenido(new pnl_AltaTabla(interfaz_menu_padre, inSocket, outSocket, dni));
        }
    }//GEN-LAST:event_CrearTablaPersonalizada_lb2MouseClicked

    private void CrearTablaPersonalizada_lb2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearTablaPersonalizada_lb2MouseEntered
        opcionFocusGained(evt);
    }//GEN-LAST:event_CrearTablaPersonalizada_lb2MouseEntered

    private void CrearTablaPersonalizada_lb2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CrearTablaPersonalizada_lb2MouseExited
        opcionFocusLost(evt);
    }//GEN-LAST:event_CrearTablaPersonalizada_lb2MouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CrearTablaPersonalizada_lb2;
    private javax.swing.JLabel altura_lbl;
    private javax.swing.JLabel apellido_lbl;
    private javax.swing.JLabel asignarTablaModelo_lb;
    private javax.swing.JLabel dni_lbl;
    private javax.swing.JLabel error_lbl;
    private javax.swing.JLabel fecha_lbl;
    private javax.swing.JLabel imagen_lbl;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel nombre_lbl;
    private javax.swing.JLabel notas_lbl;
    private javax.swing.JTextField patronBuscar_tf;
    private javax.swing.JLabel peso_lbl;
    private javax.swing.JLabel titulo_lb;
    // End of variables declaration//GEN-END:variables

    private void cargarTablaClientes() {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C15-LISTA_CLIENTES\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S20-LISTA_CLIENTES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroCliente = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosClientes = Utilidades.obtenerCliente(parametroCliente);
                            System.out.println("fila:" + atributosClientes);
                            defaultTableMode.addRow(atributosClientes);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_VerClientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_cargarTrabajadores.start();

    }

    private void eliminarCliente(String DNI) {

        Thread thread_eliminarTrabajador = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1. COMPROBAR si tiene FOTO, para ELIMINARLA tambien.
                    if(rutaFotoSeleccionada!=null){
                        
                        System.out.println("Interfaz: Entra en eliminar foto:"+rutaFotoSeleccionada);
                        outSocket.write("C20_ELIMINAR_FOTO:" + rutaFotoSeleccionada + "\n");
                        outSocket.flush();
                        String respuestaServidor = inSocket.readLine(); 
                        
                    }
                    
                    //2. ELIMINAR TUPLA CLIENTE desde el servidor. 

                    outSocket.write("C19_ELIMINAR_CLIENTE:" + DNI + "\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();

                    if (respuestaServidor.contains("S26-CLIENTE_NO_ENCONTRADO")) {
                        error_lbl.setText("El trabajador no ha podido ser eliminado.Otro administrador debe de haberlo eliminado o modificado.");
                    } else if (respuestaServidor.contains("S25-CLIENTE_ELIMINADO")) {
                        error_lbl.setText("Eliminacion completada exitosamente.");
                        defaultTableMode.setRowCount(0);
                        cargarTablaClientes();
                    } else {
                        error_lbl.setText("Error en el servidor. Intentelo mas tarde");
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_VerClientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        thread_eliminarTrabajador.start();
    }

    private void opcionFocusGained(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void opcionFocusLost(java.awt.event.MouseEvent evt) {
        JLabel labelFocus = (JLabel) evt.getSource();
        Font font = labelFocus.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, -1);
        labelFocus.setFont(font.deriveFont(attributes));
    }

    private void darFormatoTabla() {

        defaultTableMode = (DefaultTableModel) this.jTable1.getModel();
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(74, 31, 61));
        jTable1.getTableHeader().setForeground(new Color(255, 255, 255));
        jTable1.getTableHeader().setPreferredSize(new Dimension(jScrollPane1.getWidth(), 50));
        jTable1.setRowHeight(50);

        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(createEmptyBorder());

        Font labelFont = patronBuscar_tf.getFont();

        jTable1.getTableHeader().setFont(new Font(labelFont.getName(), Font.PLAIN, labelFont.getSize()));

        //Cambiar barra 
        jScrollPane1.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new Color(74, 31, 61);
            }

        });

        Font font = titulo_lb.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        titulo_lb.setFont(font.deriveFont(attributes));
    }

    private void cargarTablaClientesBusqueda(String patron) {
        Thread thread_cargarTrabajadores = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C17-LISTAR_BUSQUEDA_CLIENTES:" + patron + "\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S20-LISTA_CLIENTES")) {
                        defaultTableMode.setRowCount(0);
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);  //Cuenta cuantos usuarios devuelve tras filtrar
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroCliente = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosCliente = Utilidades.obtenerCliente(parametroCliente);
                            System.out.println("fila:" + atributosCliente);
                            defaultTableMode.addRow(atributosCliente);
                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_VerClientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        thread_cargarTrabajadores.setDaemon(true);
        thread_cargarTrabajadores.start();
    }

    private void mostrarDatosCliente(String dniSeleccionado) {
        Thread thread_mostrarCliente = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    //1 Solicitar al servidor el listado de trabajadores (String)
                    outSocket.write("C16-MOSTRAR_CLIENTE:" + dniSeleccionado + "\n");
                    outSocket.flush();

                    String respuestaServidor = inSocket.readLine();
                    if (respuestaServidor.contains("S12-ERROR_QUERY")) {
                        System.out.println("Error al cargar la query (pendiente)");
                    } else if (respuestaServidor.contains("S21-INFO_CLIENTE")) {
                        int numeroDeUsuarios = Utilidades.contarParametros(respuestaServidor);  //Cuenta cuantos usuarios devuelve tras filtrar
                        for (int i = 0; i < numeroDeUsuarios; i++) {
                            String parametroCliente = Utilidades.obtenerParametro(respuestaServidor, i + 1);
                            Object[] atributosCliente = Utilidades.obtenerDatosCliente(parametroCliente,"&");

                            dni_lbl.setText("DNI: " + atributosCliente[0]);
                            nombre_lbl.setText("Nombre:" + atributosCliente[1]);
                            apellido_lbl.setText("Apellido:" + atributosCliente[2]);
                            fecha_lbl.setText("Fecha de nacimiento::" + atributosCliente[3]);
                            peso_lbl.setText("Peso:" + atributosCliente[4]);
                            altura_lbl.setText("Altura:" + atributosCliente[5]);
                            notas_lbl.setText("Notas:" + atributosCliente[6]);

                            String rutaImagen = (String) atributosCliente[7];
                            System.out.println("Ruta cogida:"+rutaImagen);
                            if (rutaImagen.equals("") || rutaImagen==null) {
                                cargarImagenNoDisponible();
                                rutaFotoSeleccionada=null;
                            } else {
                                Utilidades.mostrarImagen(rutaImagen, imagen_lbl,200,250);
                                rutaFotoSeleccionada=rutaImagen;
                            }

                        }

                    } else {
                        System.out.println("Respuesta erronea del server:" + respuestaServidor);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(pnl_VerClientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            
            
                    
            

            

            private void cargarImagenNoDisponible() {

                try {
                    File imagenNoDisponible = new File("./src/Recursos/user-male.png");
                    byte[] imagenTotal = Files.readAllBytes(imagenNoDisponible.toPath());
                    final int ANCHURA_IMG = 200;
                    final int ALTURA_IMG = 250;
                    ByteArrayInputStream bais = new ByteArrayInputStream(imagenTotal);
                    BufferedImage img = ImageIO.read(bais);
                    System.out.println(img);
                    BufferedImage resizedImage = Utilidades.resizeImage(img, ANCHURA_IMG, ALTURA_IMG);
                    imagen_lbl.setIcon(new ImageIcon(resizedImage));

                } catch (IOException ex) {

                }

            }
        });
        thread_mostrarCliente.setDaemon(true);
        thread_mostrarCliente.start();
    }
    
    public void mostrarMensajeError(String mensaje){
        error_lbl.setText(mensaje);
    }

}
